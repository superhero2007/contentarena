# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build_be:
    working_directory: /var/www/html
    docker:
      - image: php:7.1-apache
        environment:
          APP_ENV: test
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: hogmorem_newcontentarena
          MYSQL_USER: root
          MYSQL_PASSWORD: root
          MYSQL_ROOT_PASSWORD: root

      - image: circleci/mysql:5.6
        environment:
           MYSQL_ROOT_HOST: "%"
           MYSQL_ROOT_PASSWORD: root
    steps:

      - run:
          name: Install Mysql and stuff
          command: |
            apt-get update --yes
            apt-get -y install git --yes
            apt-get install -y libzip-dev --yes
            apt-get install -y zlib1g-dev libicu-dev g++ --yes
            apt-get install mysql-client --yes
      - run:
          name: Install PHP exts
          command: |
            docker-php-ext-install zip
            docker-php-ext-configure intl
            docker-php-ext-install intl
            docker-php-ext-install pdo_mysql
      - run:
          name: Mysql database
          command: mysql -h 127.0.0.1 -u root  --password=root -e "create database hogmorem_newcontentarena;"
      - checkout
      - restore_cache:
          keys:
            - composer-v1.1-{{ checksum "composer.lock" }}
            - composer-v1.1-
            - v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('https://composer.github.io/installer.sig'))) { echo 'Installer verified'; } else { echo 'Installer invalid'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
      - run:
          name: Display PHP information
          command: |
            php -v
            php composer.phar --version
      - run:
          name: Install project dependencies
          command: php composer.phar install --no-interaction
      - save_cache: # save composer cache
          key: composer-v1.1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      - run: php bin/console doctrine:migrations:migrate -n
      - run: php bin/console doctrine:fixtures:load --append
      - run:
          name: Copy fe files
          command: |
            cp -r ~/project/web/assets /var/www/html/web
      - run:
          name: Run Unit tests
          command: vendor/bin/simple-phpunit

      - run:
          name: Build Failed
          when: on_fail
          command: cat var/logs/test.log

  build_fe:
    docker:
      - image: circleci/node:7.10

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v2-dependencies-{{ checksum "package.json" }}

      # Lint FE code
      - run:
          name: Linting
          command: npm run lint

      - run:
          name: Testing FE
          command: npm run test_fe

      # Build project with different configuration based on
      # the current branch
      - run:
          name: Building
          command: |
            if [ "${CIRCLE_BRANCH}" == "development" ]; then
                npm run dev
            elif [ "${CIRCLE_BRANCH}" == "release" ]; then
                npm run prod
            else
                npm run dev
            fi
      # Cache the dist folder for the deploy job
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
              - web/assets

  deploy:
    docker:
      - image: circleci/node:7.10
    steps:
      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}

      - add_ssh_keys:
          fingerprints:
            - "12:8d:60:df:e4:7e:04:e8:05:6e:54:67:a5:bd:6b:5d"

      - run:
          name: Create known_hosts
          command: cat > ~/.ssh/known_hosts

      - run:
          name: Keyscan known_hosts
          command: ssh-keyscan -H sl663.web.hostpoint.ch >> ~/.ssh/known_hosts

      - run:
          name: Upload FE files over SSH
          command: |
            scp -r ~/project/web/assets "hogmorem@sl663.web.hostpoint.ch:/home/hogmorem/www/dev/web"
      - run:
          name: Run ENV deploy task
          command: ssh hogmorem@sl663.web.hostpoint.ch ./deploy-dev

  deploy_test:
    docker:
      - image: circleci/node:7.10
    steps:
      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}

      - add_ssh_keys:
          fingerprints:
            - "12:8d:60:df:e4:7e:04:e8:05:6e:54:67:a5:bd:6b:5d"

      - run:
          name: Create known_hosts
          command: cat > ~/.ssh/known_hosts

      - run:
          name: Keyscan known_hosts
          command: ssh-keyscan -H sl663.web.hostpoint.ch >> ~/.ssh/known_hosts

      - run:
          name: Upload FE files over SSH
          command: |
            scp -r ~/project/web/assets "hogmorem@sl663.web.hostpoint.ch:/home/hogmorem/www/api/web"
      - run:
          name: Run ENV deploy task
          command: ssh hogmorem@sl663.web.hostpoint.ch ./deploy-api

workflows:
  version: 2
  # The build and deploy workflow
  build_and_deploy_dev:
    jobs:
      - build_be:
          requires:
            - build_fe
          filters:
            branches:
              ignore:
                - release
      - build_fe:
          filters:
            branches:
              ignore:
                - release
      # The deploy job will only run on the filtered branches and
      # require the build job to be successful before it starts
      - deploy:
          requires:
            - build_fe
            - build_be
          filters:
            branches:
              only:
                - development
  build_and_deploy_test:
      jobs:
        - build_be:
            requires:
              - build_fe
            filters:
              branches:
                only:
                - release
        - build_fe:
            filters:
              branches:
                only:
                  - release
        - deploy_test:
            requires:
              - build_fe
              - build_be
            filters:
              branches:
                only:
                  - release
