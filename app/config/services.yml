# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    service.entry_point:
            class: AppBundle\Service\CustomEntryPoint
            arguments: ['@security.authentication.form_entry_point.main']

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests, Test}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    AppBundle\DataFixtures\:
        resource: '../../src/AppBundle/DataFixtures'
        tags: ['doctrine.fixture.orm']


    AppBundle\Service\FileUploader:
        arguments:
            $targetDir: '%uploads_main_folder%'
            $tmpTargetDir: '%uploads_tmp_folder%'
            $uploadsUriPrefix: '%uploads_uri_prefix%'
            $uploadsTmpUriPrefix: '%uploads_tmp_uri_prefix%'

    AppBundle\Service\SportRadarService:
        arguments:
            $entityManager : '@doctrine.orm.entity_manager'
            $sportradarApiToken: '%sportradar_api_token%'
            $sportradarApiHost: '%sportradar_api_host%'
        public: true
    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    AppBundle\Service\EmailService:
        arguments:
            $entityManager : '@doctrine.orm.entity_manager'
            $twig : '@twig'
            $mailer: '@mailer'
            $translator: '@translator'
            $hostUrl: '%carena_host_url%'
            $infoAddress : '%app.email_info%'
            $supportAddress : '%app.email_support%'
            $bccAlexAddress : '%app.email_bcc_alex%'
            $bccSaschaAddress : '%app.email_bcc_sascha%'
            $alertsAddress : '%app.email_alerts%'

    AppBundle\Service\JobService:
        arguments:
            $entityManager : '@doctrine.orm.entity_manager'
            $emailService: '@AppBundle\Service\EmailService'
            $router: '@router'
            $accountIncompleteTime: '%job_account_incomplete_time%'
            $accountIncompleteFromInviteTime: '%job_account_incomplete_from_invite_time%'

    app.command.send_email:
            class: AppBundle\Command\SendEmail
            tags:
                -  { name: console.command }

    app.command.jobs:
                class: AppBundle\Command\JobCommand
                tags:
                    -  { name: console.command }

    app.form.registration:
            class: AppBundle\Form\RegistrationFormType
            tags:
                - { name: form.type }

    app_bundle.registration_confirmed:
        class: AppBundle\EventListener\RegisterConfirmationSuccess
        arguments: ['@twig','@mailer', '@doctrine.orm.entity_manager' ]
        tags:
            - { name: kernel.event_subscriber }

    app_bundle.resettin_password_completed:
        class: AppBundle\EventListener\ResetPasswordSuccess
        arguments: ['@AppBundle\Service\EmailService', '@doctrine.orm.entity_manager', '@service_container']
        tags:
            - { name: kernel.event_subscriber }

    app_bundle.admin_edit_action:
        class: AppBundle\EventListener\AdminEditAction
        arguments: ['@twig','@mailer']
        tags:
            - { name: kernel.event_subscriber }

    license_service:
            class: AppBundle\Controller\LicenseController

    app_bundle.user_service:
        class: AppBundle\Service\UserService
        arguments:
            $entityManager : '@doctrine.orm.entity_manager'
            $idGenerator: '@AppBundle\Doctrine\RandomIdGenerator'
            $fileUploader: '@AppBundle\Service\FileUploader'
            $fosUserManager: '@fos_user.user_manager'
            $tokenGenerator: '@fos_user.util.token_generator'
            $emailService: '@AppBundle\Service\EmailService'
            $logger: '@logger'

    twig.app_extension:
        class: AppBundle\Twig\AppExtension
        tags:
            - { name: twig.extension }

    api.contract_controller:
        class: ApiBundle\Controller\ContractController
        calls:
            - [setContainer, ["@service_container"]]

    api.feed_controller:
        class: ApiBundle\Controller\FeedController
        arguments: ['@AppBundle\Service\SportRadarService']

    AppBundle\EventListener\UpdateListingSubscriber:
        arguments: ['@AppBundle\Service\ContentService','@AppBundle\Service\EmailService', '@doctrine.orm.entity_manager', '@service_container', '@AppBundle\Service\NotificationService']
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    browser_unsupported.listener:
          class: AppBundle\EventListener\BrowserUnsupportedExceptionListener
          tags:
              - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
          arguments: [ '@router', '@service_container' ]

    custom_serializer_handle:
        class: AppBundle\Serializer\Handler\EntityHandler
        arguments: ['@doctrine']
        public: true
        tags:
            - {name: jms_serializer.subscribing_handler}
