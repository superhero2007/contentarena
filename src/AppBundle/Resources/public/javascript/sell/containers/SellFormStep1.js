import React from "react";
import { connect } from "react-redux";
import TagsInput from "react-tagsinput";
import { PropTypes } from "prop-types";
import FileSelector from "../../main/components/FileSelector";
import SearchCompetition from "../../main/components/SearchCompetition";
import SeasonSelector from "../../main/components/SeasonSelector";
import { stepChangeReset } from "../actions/contentActions";
import { getAutoGeneratedListingName } from "../../common/utils/listing";
import {
	Description, NewCategory, NewTournament, SportSelector,
} from "../components/SellFormItems";
import {
	addNewCategory,
	addNewSeason,
	addNewTournament,
	openCategorySelector,
	openSeasonSelector,
	openSportSelector,
	openTournamentSelector,
	removeFromMultiple,
	removeNewCategory,
	removeNewSeason,
	removeNewSport,
	removeNewTournament,
	reset,
	updateAttachments,
	updateContentValue,
	updateFromMultiple,
} from "../actions/stepOneActions";
import ListingName from "../components/ListingName";

class SellFormStep1 extends React.Component {

	constructor(props) {
		super(props);
		if (props.step !== 1) return;
		this.state = {
			lastSportId: null,
			lastCategoryId: null,
			lastTournamentId: null,
			loadingCategories: false,
			loadingTournaments: false,
			loadingSeasons: false,
			loadingSchedule: false,
			seasonSelectors: [1],
			sportSelectors: [1],
			seasons: [],
			schedules: {},
			showSearch: props.showSearch,
			websites: [],
			website: "",
			tournaments: [],
			sportCategories: [],
			sportCategoryExtended: false,
			tournamentHasNoSeason: false,
			nameSet: !!props.name,
			disableSaveWebsiteButton: true,
			customTournamentUpdated: false
		};
	}

	componentDidMount() {
		if (this.props.step !== 1) return;
		ContentArena.Api.getAllSports(["create"])
			.done((sports) => {
				ContentArena.Data.FullSports = sports;
			});

		ContentArena.Api.getAllSports(["top"])
			.done((sports) => {
				ContentArena.Data.TopSports = sports;
			});

		this.props.updateContentValue("lastUpdate", new Date().getTime());
	}

	loadCategories(sport) {
		const sportId = sport.externalId;

		if (sportId === this.state.lastSportId) return;

		this.setState({ loadingCategories: true });
		ContentArena.Api.getCategories(sportId)
			.done((categories) => {
				ContentArena.Data.Categories = categories;
				this.setState({
					lastSportId: sportId,
					loadingCategories: false,
				});
			});
	}

	loadTournaments(sport, category) {
		if (sport.custom || (sport.externalId && sport.externalId.startsWith("ca:"))) return;

		const sportId = sport.externalId;
		const categoryId = (category) ? category.externalId : null;

		if (sportId === this.state.lastSportId && categoryId === this.state.lastCategoryId) return;

		this.setState({ loadingTournaments: true });
		ContentArena.Api.getTournaments(sportId, categoryId)
			.done((tournaments) => {
				ContentArena.Data.Tournaments = tournaments;
				if (tournaments.length === 0) {
					if (!this.state.customSeasonsParsed) {
						this.props.addNewCategory();
						this.props.addNewTournament();

						if (this.props.customSeasons.length > 0) {
							this.props.customSeasons.forEach((s, i) => {
								this.props.addNewSeason(i);
								this.props.updateFromMultiple("seasons", i, "from", s.from);
								this.props.updateFromMultiple("seasons", i, "to", s.to);
								this.props.updateFromMultiple("seasons", i, "customStartDate", s.customStartDate);
								this.props.updateFromMultiple("seasons", i, "customEndDate", s.customEndDate);
								if (s.fixtures) this.props.updateFromMultiple("seasons", i, "fixtures", s.fixtures);
							});
						} else {
							this.props.addNewSeason(0);
						}
					}

					this.setState({
						loadingTournaments: false,
						customSeasonsParsed: true,
					});

					return;
				}

				this.setState({
					lastSportId: sportId,
					loadingTournaments: false,
					lastCategoryId: categoryId,
				});
			});
	}

	loadSeasons(tournaments) {
		const tournamentId = (tournaments.length > 0) ? tournaments[0].externalId : null;

		if (tournamentId === this.state.lastTournamentId) return;

		this.setState({ loadingSeasons: true });
		ContentArena.Api.getSeasons(tournamentId)
			.done((seasons) => {
				ContentArena.Data.Seasons = seasons;

				if (seasons.length === 0) {
					const hasSeasons = this.props.seasons && this.props.seasons.length;
					if (!hasSeasons && (this.props.customSeasons === null
						|| this.props.customSeasons === undefined || this.props.customSeasons.length === 0)) {
						this.props.addNewSeason(0);
					}
					this.setState({
						loadingSeasons: false,
						tournamentHasNoSeason: true,
					});
					return;
				}

				this.setState({
					lastTournamentId: tournamentId,
					loadingSeasons: false,
					tournamentHasNoSeason: false,
					seasons,
				});
			})
			.always(() => {
			});
	}

	componentWillReceiveProps(nextProps) {
		if (nextProps.step !== 1) return;

		const { loadingCategories, loadingTournaments, loadingSeasons, seasonSelectors } = this.state;
		let tournaments;
		let sportCategories;

		tournaments = (Array.isArray(nextProps.tournament)) ? nextProps.tournament : [nextProps.tournament];
		const seasons = (Array.isArray(nextProps.seasons)) ? nextProps.seasons : [nextProps.seasons];
		sportCategories = (Array.isArray(nextProps.sportCategory))
			? nextProps.sportCategory : [nextProps.sportCategory];
		const websites = (Array.isArray(nextProps.website))
			? nextProps.website : (nextProps.website) ? [nextProps.website] : [];

		if (nextProps.sports.length === 1 && !loadingCategories && !nextProps.sports[0].custom) {
			this.loadCategories(nextProps.sports[0]);
			this.setState(() => ({
				showSearch: false,
			}));
		}

		if (nextProps.sports.length === 0) {
			this.setState(() => ({
				seasons: [],
				schedules: [],
				seasonSelectors: []
			}));
			sportCategories = [];
			tournaments = [];

			this.props.updateContentValue("name", "");
		}

		if (nextProps.sports.length === 1 && !loadingTournaments && !nextProps.sports[0].custom) {
			this.loadTournaments(nextProps.sports[0], sportCategories[0]);
		}

		if (tournaments.length === 1 && !loadingSeasons) {
			if (!tournaments[0].custom && !tournaments[0].externalId.startsWith("ca:") && !this.tournamentHasDates(tournaments[0])) {
				this.loadSeasons(tournaments);
			}
		}

		console.log(seasonSelectors, nextProps.seasons);

		if (nextProps.customTournament &&
			nextProps.customTournament !== "" &&
			nextProps.seasons.length === 0 &&
			seasonSelectors.length === 0) this.addSeason();

		if (tournaments.length === 0) {
			this.setState({ seasons: [], seasonSelectors: [] });
		}

		if (tournaments.length === 1 && nextProps.seasons.length === 0 && seasonSelectors.length === 0) {
			this.addSeason();
		}

		this.setState({
			sportCategories,
			tournaments,
		});

		if (sportCategories.length === 1) {
			this.setState({ sportCategoryExtended: sportCategories[0].extended });

			if (sportCategories[0].extended) {
				this.props.updateContentValue("customCategory", sportCategories[0].name);
			}
		}

		if (seasons.length > 0) {
			this.setState(() => ({
				seasonSelectors: [...Array(seasons.length)
					.keys()],
			}));
		}

		if (nextProps.sports.length > 0) {
			this.setState(() => ({
				sportSelectors: [...Array(nextProps.sports.length)
					.keys()],
			}));
		}

		if (websites && websites.length > 0) {
			this.setState({ websites });
		}

		const oldAutoName = getAutoGeneratedListingName(this.props);
		const newAutoName = getAutoGeneratedListingName(nextProps);

		if (
			(oldAutoName !== newAutoName
				|| this.hasCustomSport()
				|| this.hasCustomCategory()
				|| this.hasCustomTournament()
				|| this.hasCustomSeason())
			&& !(this.state.nameSet || nextProps.id)
		) {
			this.props.updateContentValue("name", newAutoName);
		}
	}

	/**
	 *
	 * @param event
	 * @param key
	 */
	updateContentValue = (event, key) => {
		this.props.updateContentValue(key, event.target.value);
	};

	updateTournamentName = (e) => {
		this.setState({lastTournamentId : null});
		this.updateContentValue(e, "customTournament")
	};

	forceCustomTournament = () => this.hasCustomSport() || this.hasCustomCategory() || this.state.sportCategoryExtended;

	forceCustomCategory = () => this.hasCustomSport();

	forceCustomSeason = () => this.hasCustomSport() || this.hasCustomTournament() || this.state.tournamentHasNoSeason;

	hasCustomSport = () => {
		let hasCustomSport = false;

		this.props.sports.forEach((sport) => {
			if (sport.custom || (sport.externalId && sport.externalId.startsWith("ca:"))) hasCustomSport = true;
		});

		return hasCustomSport && this.props.sports.length === 1;
	};

	hasCustomCategory = () => {
		let hasCustomCategory = false;

		this.state.sportCategories.forEach((sportCategory) => {
			if (sportCategory.custom) hasCustomCategory = true;
		});

		return this.forceCustomCategory() || hasCustomCategory;
	};

	hasCustomTournament = () => {
		let hasCustomTournament = false;
		this.state.tournaments.forEach((tournament) => {
			if (tournament.custom) hasCustomTournament = true;
		});

		return this.forceCustomTournament() || hasCustomTournament || this.state.sportCategoryExtended;
	};

	hasCustomSeason = () => {
		let hasCustomSeason = false;
		this.props.seasons.forEach((season) => {
			if (season.custom) hasCustomSeason = true;
		});

		return this.forceCustomSeason() || hasCustomSeason;
	};

	tournamentHasDates = tournament => tournament.scheduled && tournament.scheduledEnd;

	addSeason = () => {
		const { seasons, tournament, addNewSeason } = this.props;
		const { name } = tournament.length > 0 && tournament[0];

		this.setState(() => ({
			seasonSelectors: [...Array(seasons.length + 1).keys()],
		}));

		if (this.forceCustomSeason()) {
			addNewSeason(this.props.seasons.length, name);
		}
	};

	addSportSelector = () => {
		this.setState(prevState => ({
			sportSelectors: [...prevState.sportSelectors, 1],
		}));
	};

	removeSport = (i) => {
		if (i === 0) {
			this.props.removeNewSport(i);
			return;
		}

		this.setState((prevState) => {
			prevState.sportSelectors.splice(i, 1);
			return {
				sportSelectors: prevState.sportSelectors,
			};
		});

		this.props.removeFromMultiple(i, "sports");
	};

	removeSeason = (i) => {
		/*if (i === 0) {
			this.props.removeNewSeason(i);
			return;
		}*/

		this.setState((prevState) => {
			prevState.seasonSelectors.splice(i, 1);
			return {
				seasonSelectors: prevState.seasonSelectors,
			};
		});

		this.props.removeFromMultiple(i, "seasons");
	};

	toggleSearch = (tournament) => {
		const { history } = this.props;
		const _this = this;
		history.push("/contentlisting/1");
		if (tournament) {
			setTimeout(() => {
				_this.props.selectTournament(tournament);
			}, 1000);
		}
	};

	websitesUpdated = (websites) => {
		this.setState({ websites });
		this.props.updateContentValue("website", websites);
	};

	handleWebsiteChange = (website) => {
		this.setState({ website });
	};

	selectTournament = (tournament) => {
		this.toggleSearch(tournament);
	};

	clear = () => {
		this.props.reset();
		const { history } = this.props;
		history.push("/contentlisting/new");
	};

	scroll = () => {
		const { stepChange, stepChangeReset } = this.props;
		if (stepChange) {
			window.scrollTo(0, 0);
			stepChangeReset();
		}
	};

	addFile = (response) => {
		const { attachments } = this.props;
		const index = attachments.length;
		this.props.updateAttachments("save", index, {
			file: response.file,
			name: response.name,
		});
	};

	removeFile = (index) => {
		this.props.updateAttachments("remove", index, null);
	};

	showSeasonSelector = () => {
		let show = this.state.sportSelectors.length === 1
			&& (this.state.seasons.length > 0 || this.forceCustomSeason())
			&& this.state.seasonSelectors.length > 0;

		if (this.hasCustomTournament() && (this.props.customTournament === null || this.props.customTournament === "")) show = false;
		console.log(show)
		return show;
	};

	render() {
		if (this.props.step !== 1) return (null);

		const { websites, website } = this.state;
		const websitePlaceholder = websites.length > 0 ? "" : this.context.t("CL_STEP1_PLACEHOLDER_WEBSITE");

		this.scroll();

		const inputProps = {
			sports: [{
				value: "",
				custom: false,
			}],
			sportCategory: {
				value: "",
				custom: false,
			},
			tournament: {
				value: "",
				custom: false,
			},
			seasons: [{
				value: "",
				custom: false,
			}],
		};

		if (this.props.sports.length > 0) {
			inputProps.sports = [];
			this.props.sports.forEach((sport) => {
				inputProps.sports.push({
					value: sport.name,
					isCustom: sport.custom,
				});
			});
		}
		if (this.props.seasons.length > 0) {
			inputProps.seasons = [];
			this.props.seasons.forEach((season) => {
				inputProps.seasons.push({
					value: season.name,
					from: season.from,
					to: season.to,
					isCustom: season.custom,
					startDate: season.startDate,
					endDate: season.endDate,
				});
			});
		}
		if (this.state.sportCategories.length > 0 && this.props.sportCategory.length === 0) {
			inputProps.sportCategory = {
				value: this.state.sportCategories[0].name,
				isCustom: this.state.sportCategories[0].isCustom,
			};
		}
		if (this.state.tournaments.length > 0 && this.props.tournament.length === 0) {
			inputProps.tournament = {
				value: this.state.tournaments[0].name,
				isCustom: this.state.tournaments[0].isCustom,
			};
		}
		if (this.props.tournament.length > 0) {
			inputProps.tournament = {
				value: this.props.tournament[0].name,
				isCustom: this.props.tournament[0].isCustom,
			};
		}
		if (this.props.sportCategory.length > 0) {
			inputProps.sportCategory = {
				value: this.props.sportCategory[0].name,
				isCustom: this.props.sportCategory[0].isCustom,
			};
		}

		const { validation, name } = this.props;

		console.log(this.state.seasonSelectors)

		return (
			<div className="step-content">

				{this.state.showSearch && (
					<SearchCompetition
						close={() => {
							this.toggleSearch(false);
						}}
						select={this.selectTournament}
					/>
				)}
				{!this.state.showSearch && (
					<div className="buttons">
						<div className="buttons-container" style={{ justifyContent: "flex-start" }}>
							<button className="light-blue-button" onClick={this.clear}>
								{this.context.t("CL_STEP1_BUTTON_START_OVER")}
							</button>
						</div>
					</div>
				)}

				{!this.state.showSearch && (
					<div className="step-content-container">

						<div className="step-title">
							{this.context.t("CL_STEP1_LABEL_EVENT_TITLE")}
						</div>

						<div className="step-item-description" style={{ marginTop: 0 }}>
							{this.context.t("CL_STEP1_DESCRIPTION_1")}
						</div>

						{this.state.sportSelectors.map((item, i, list) => {
							const value = (inputProps.sports[i]) ? inputProps.sports[i].value : "";
							return (
								<SportSelector
									key={i}
									index={i}
									sports={this.props.sports}
									remove={() => this.removeSport(i)}
									showAddNew={list.length > 1 && list.length === i + 1}
									onUpdateNew={(name) => {
										this.props.updateFromMultiple("sports", i, "value", name);
									}}
									showClose={i > 0}
									isCustom={(inputProps.sports[i]) ? inputProps.sports[i].isCustom : false}
									addSportSelector={this.addSportSelector}
									onClick={() => {
										this.props.openSportSelector(i, this.props.sports);
									}}
									value={value}
									isInvalid={!value && validation}
								/>
							);
						})}

						{this.state.sportSelectors.length === 1 && !this.hasCustomCategory() && (
							<div className="base-input">
								<label>
									{this.context.t("CL_STEP1_LABEL_COUNTRY")}
								</label>
								<input
									type="text"
									value={inputProps.sportCategory.value || ""}
									readOnly
									disabled={this.props.sports.length === 0 || this.state.loadingCategories}
									onClick={() => {
										this.props.openCategorySelector(this.state.sportCategories);
									}}
									placeholder={this.context.t("CL_STEP1_PLACEHOLDER_COUNTRY")}
								/>
								{this.state.loadingCategories && <i className="fa fa-cog fa-spin" />}
							</div>
						)}
						{this.state.sportSelectors.length === 1 && this.hasCustomCategory() && (
							<NewCategory
								showClose={!this.forceCustomCategory()}
								value={this.props.customCategory}
								onBlur={e => this.updateContentValue(e, "customCategory")}
								onClick={this.props.removeNewCategory}
							/>
						)}
						{this.state.sportSelectors.length === 1 && !this.hasCustomTournament() && (
							<div className="base-input">
								<label>
									{this.context.t("CL_STEP1_LABEL_COMPETITION")}
								</label>
								<input
									type="text"
									value={inputProps.tournament.value || ""}
									readOnly
									disabled={this.props.sports.length === 0 || this.state.loadingTournaments}
									onClick={() => {
										this.props.openTournamentSelector(this.state.tournaments);
									}}
									placeholder={this.context.t("CL_STEP1_PLACEHOLDER_COMPETITION")}
								/>
								{this.state.loadingTournaments && <i className="fa fa-cog fa-spin" />}
							</div>
						)}

						{this.state.sportSelectors.length === 1 && this.hasCustomTournament() && (
							<NewTournament
								showClose={!this.forceCustomTournament()}
								value={this.props.customTournament}
								onBlur={e => this.updateTournamentName(e)}
								onClick={this.props.removeNewTournament}
							/>
						)}

						{this.showSeasonSelector() && this.state.seasonSelectors.map((season, i, list) => (
							<SeasonSelector
								key={i}
								season={i}
								index={i}
								addSeason={this.addSeason}
								removeSeason={() => this.removeSeason(i)}
								value={(inputProps.seasons[i]) ? inputProps.seasons[i].value : ""}
								loading={this.state.loadingSeasons}
								showClose={i > 0}
								onBlur={e => this.updateContentValue(e, "customSeason")}
								isCustom={(inputProps.seasons[i]) ? inputProps.seasons[i].isCustom || this.forceCustomSeason() : this.forceCustomSeason()}
								showAddNew={this.props.seasons.length > 0 && list.length - 1 === i}
								openSelector={() => this.props.openSeasonSelector(i, this.props.seasons)}
							/>
						))}

						{(this.state.loadingSeasons || this.state.loadingSchedule) && (
							<div><i className="fa fa-cog fa-spin" /></div>
						)}

						<div className="step-title">
							{this.context.t("CL_STEP1_LABEL_LISTING_TITLE")}
						</div>

						<div className="step-item-description" style={{ marginTop: 0 }}>
							{this.context.t("CL_STEP1_LISTING_DETAILS_TEXT")}
						</div>

						<ListingName
							name={name}
							onChange={e => this.props.updateContentValue("name", e.target.value)}
						/>

						<Description
							value={this.props.description}
							title={this.context.t("CL_STEP1_LISTING_DETAILS_TITLE")}
							placeholder={this.context.t("CL_STEP1_LISTING_DETAILS_PLACEHOLDER")}
							onChange={e => this.updateContentValue(e, "description")}
						/>

						<div
							className="step-item-description"
							style={{ marginTop: 0 }}
						>
							{this.context.t("CL_STEP1_IMAGE_INFO")}
						</div>
						<FileSelector
							label={this.context.t("CL_STEP1_LABEL_IMAGE")}
							isImage
							onSelect={this.props.updateContentValue}
							previousImage={this.props.image}
							imageBase64={this.props.imageBase64}
							target="imageBase64"
						/>

						<div className="base-input">
							<label>
								{this.context.t("CL_STEP1_LABEL_WEBSITE")}
							</label>
							<TagsInput
								inputProps={{
									onChange: this.onWebsiteInputChange,
									placeholder: websitePlaceholder,
								}}
								value={websites}
								ref={e => this.tagsInput = e}
								onChange={this.websitesUpdated}
								inputValue={website}
								onChangeInput={this.handleWebsiteChange}
							/>
							<button
								className="standard-button"
								disabled={this.state.disableSaveWebsiteButton}
								onClick={this.onSiteSaveClicked}
							>
								{this.context.t("CL_STEP5_BUTTON_SAVE")}
							</button>
						</div>

						<FileSelector
							target="attachments"
							selected={this.props.attachments}
							onSelect={this.addFile}
							onRemove={this.removeFile}
							accept={["image/png", "image/jpg", ".pdf", ".doc", ".docx", ".cvs", ".ppt", ".xls", ".xlsx"]}
							acceptType={[
								"image/jpeg",
								"image/png",
								"application/pdf",
							]}
							tmp
						/>
					</div>
				)}
			</div>
		);
	}

	onSiteSaveClicked = () => {
		this.tagsInput.accept();

		this.setState({
			disableSaveWebsiteButton: true,
		});
	};

	onWebsiteInputChange = (e) => {
		const disableSaveWebsiteButton = !e.target.value.trim();

		this.setState({
			disableSaveWebsiteButton,
		});
	};
}

SellFormStep1.contextTypes = {
	t: PropTypes.func.isRequired,
};

const mapStateToProps = state => ({
	...state.content,
	validation: state.validation,
});

const mapDispatchToProps = dispatch => ({
	updateFromMultiple: (type, index, key, value) => dispatch(updateFromMultiple(type, index, key, value)),
	updateAttachments: (name, index, value) => dispatch(updateAttachments(name, index, value)),
	openSportSelector: (index, selectedItems) => dispatch(openSportSelector(index, selectedItems)),
	openCategorySelector: selectedItems => dispatch(openCategorySelector(selectedItems)),
	openTournamentSelector: selectedItems => dispatch(openTournamentSelector(selectedItems)),
	openSeasonSelector: (index, selectedItems) => dispatch(openSeasonSelector(index, selectedItems)),
	removeFromMultiple: (index, selectorType) => dispatch(removeFromMultiple(index, selectorType)),
	updateContentValue: (key, value) => dispatch(updateContentValue(key, value)),
	removeNewSport: index => dispatch(removeNewSport(index)),
	removeNewTournament: index => dispatch(removeNewTournament(index)),
	removeNewCategory: index => dispatch(removeNewCategory(index)),
	removeNewSeason: index => dispatch(removeNewSeason(index)),
	addNewSeason: (index, name) => dispatch(addNewSeason(index, name)),
	addNewCategory: () => dispatch(addNewCategory()),
	addNewTournament: () => dispatch(addNewTournament()),
	reset: () => dispatch(reset()),
	selectTournament: tournament => dispatch({
		type: "SELECT_TOURNAMENT",
		tournament,
	}),
	stepChangeReset: () => dispatch(stepChangeReset()),
});

export default connect(
	mapStateToProps,
	mapDispatchToProps,
)(SellFormStep1);
