<?php

namespace AppBundle\Repository;


use AppBundle\Entity\Country;


/**
 * ContentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentRepository extends \Doctrine\ORM\EntityRepository
{


    public function getSearchContent($value)
    {

        return $this->createQueryBuilder('c')
            ->leftJoin('c.company', 'com')
            ->leftJoin('c.sport', 's')
            ->leftJoin('c.tournament', 't')
            ->leftJoin('c.sportCategory', 'cat')
            ->where('c.eventType LIKE :value')
            ->orWhere('c.description LIKE :value')
            ->orWhere('c.releaseYear LIKE :value')
            ->orWhere('c.ownLicense LIKE :value')
            ->orWhere('c.brochure LIKE :value')
            ->orWhere('c.programName LIKE :value')
            ->orWhere('c.programType LIKE :value')
            ->orWhere('c.seriesType LIKE :value')
            ->orWhere('c.salesPackages LIKE :value')
            ->orWhere('c.distributionPackages LIKE :value')
            ->orWhere('com.legalName LIKE :value')
            ->orWhere('s.name LIKE :value')
            ->orWhere('t.name LIKE :value')
            ->orWhere('cat.name LIKE :value')
            ->setParameter('value', '%'.$value.'%')
            ->getQuery()
            ->getResult();

    }

    public function getTerritoryInfo($customId,$limit){

        $country = $this->getEntityManager()->getRepository(Country::class);
        $content = $this->findOneBy(['customId'=>$customId]);
        $salesPackages = $content->getSalesPackages()[0];

        if($salesPackages['territories'] == 'worldwide'){
            $result = $country->createQueryBuilder('c')
                ->where('c.id >= 1')
                ->setMaxResults($limit)
                ->getQuery()
                ->getResult();

        }elseif($salesPackages['territories'] == 'selected'){
            $str = $salesPackages['selectedTerritories'];

            $result = $country->createQueryBuilder('c')
                ->where('c.country_code IN (:country)')
                ->setMaxResults($limit)
                ->setParameter('country',$str)
                ->getQuery()
                ->getResult();

        }elseif($salesPackages['territories'] == 'excluded'){
          $str = $salesPackages['excludedTerritories'];

            $result = $country->createQueryBuilder('c')
                ->where('c.country_code NOT IN (:country)')
                ->setMaxResults($limit)
                ->setParameter('country',$str)
                ->getQuery()
                ->getResult();
        }

        $data = [
            'salesPackages'=>$salesPackages,
            'countries'=>$result
        ];

        return $data;
    }

    public function getAjaxTerritoryInfo($id,$custom_id,$limit){

        $country = $this->getEntityManager()->getRepository(Country::class);
        $content = $this->findOneBy(['customId'=>$custom_id]);
        $salesPackages = $content->getSalesPackages()[0];


        if($id == 'world'){
            if($salesPackages['territories'] == 'worldwide'){
                $result = $country->createQueryBuilder('c')
                    ->where('c.id >= :id')
                    ->setMaxResults($limit)
                    ->setParameter('id',1)
                    ->getQuery()
                    ->getResult();
            }elseif($salesPackages['territories'] == 'selected'){
                $str = $salesPackages['selectedTerritories'];

                $result = $country->createQueryBuilder('c')
                    ->where('c.country_code IN (:country)')
                    ->setMaxResults($limit)
                    ->setParameter('country',$str)
                    ->getQuery()
                    ->getResult();

            }elseif($salesPackages['territories'] == 'excluded'){
                $str = $salesPackages['excludedTerritories'];
                $result = $country->createQueryBuilder('c')
                    ->where('c.country_code NOT IN (:country)')
                    ->setMaxResults($limit)
                    ->setParameter('country',$str)
                    ->getQuery()
                    ->getResult();
            }

        }else{

            if($salesPackages['territories'] == 'worldwide'){
                $result = $country->createQueryBuilder('c')
                    ->where('c.id >= 1')
                    ->setMaxResults($limit)
                    ->getQuery()
                    ->getResult();

            }elseif($salesPackages['territories'] == 'selected'){

                $str = $salesPackages['selectedTerritories'];

                $result = $country->createQueryBuilder('c')
                    ->where('c.country_code IN (:country)')
                    ->andWhere('c.territory_id = :ter')
                    ->setMaxResults($limit)
                    ->setParameter('ter',1)
                    ->setParameter('country',$str)
                    ->getQuery()
                    ->getSQL();

                var_dump($result);die;

            }elseif($salesPackages['territories'] == 'excluded'){
                $str = $salesPackages['excludedTerritories'];
                $result = $country->createQueryBuilder('c')
                    ->where('c.country_code NOT IN (:country)')
                    ->andWhere('c,territory_id = :id')
                    ->setMaxResults($limit)
                    ->setParameter('country',$str)
                    ->setParameter('id',$id)
                    ->getQuery()
                    ->getResult();
            }
        }

        $data = [
            'salesPackages'=>$salesPackages,
            'countries'=>$result
        ];


        return $data;
    }

}
